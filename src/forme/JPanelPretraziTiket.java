/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import com.sun.java.accessibility.util.AWTEventMonitor;
import domen.StavkaTiketa;
import domen.Tiket;
import domen.Tip;
import domen.Utakmica;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import komponente.tabela.model.ModelTabelePretraziTiket;
import komponente.tabela.model.ModelTabeleStavkaTiketa;
import komunikacija.KontrolerKI;

import repozitorijum.Repozitorijum;
import transfer.ServerTransferObjekat;
import transfer.KlijentTransferObjekat;

/**
 *
 * @author KORISNIK
 */
public class JPanelPretraziTiket extends javax.swing.JPanel {

    Tiket tiket;

    /**
     * Creates new form JPanelPretraziTiket
     */
    public JPanelPretraziTiket() {
        initComponents();
        pripremiTabelu();
        postaviListenere();
        setFocusOnjTextFieldIDTiketa();
    }

    private void postaviListenere() {
        listenerOnEnterPretrazi();
        listenerOnEnterStorniraj();
        listenerOnEnterIsplati();

    }

    private void listenerOnEnterPretrazi() {
        jButtonPretraziTiket.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    pretraziTiket();
                }
            }
        });

    }

    private void listenerOnEnterStorniraj() {
        jButtonStorniraj.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    stornirajTiket();
                }
            }
        });

    }

    private void listenerOnEnterIsplati() {
        jButtonIsplati.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    isplatiTiket();
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldIDTiketa = new javax.swing.JTextField();
        jButtonPretraziTiket = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldStatusTiketa = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldUkupnaKvota = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldPotencijalniDobitak = new javax.swing.JTextField();
        jButtonStorniraj = new javax.swing.JButton();
        jButtonIsplati = new javax.swing.JButton();

        setNextFocusableComponent(jTextFieldIDTiketa);
        setPreferredSize(new java.awt.Dimension(1357, 669));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel1.setText("ID tiketa:");

        jTextFieldIDTiketa.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jTextFieldIDTiketa.setNextFocusableComponent(jButtonPretraziTiket);
        jTextFieldIDTiketa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldIDTiketaFocusGained(evt);
            }
        });

        jButtonPretraziTiket.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jButtonPretraziTiket.setText("Pretrazi tiket");
        jButtonPretraziTiket.setNextFocusableComponent(jButtonStorniraj);
        jButtonPretraziTiket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPretraziTiketActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel2.setText("Status tiketa:");

        jTextFieldStatusTiketa.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jTextFieldStatusTiketa.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldStatusTiketa.setEnabled(false);
        jTextFieldStatusTiketa.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldStatusTiketaCaretUpdate(evt);
            }
        });
        jTextFieldStatusTiketa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldStatusTiketaKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel3.setText("Ukupna kvota:");

        jTextFieldUkupnaKvota.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jTextFieldUkupnaKvota.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldUkupnaKvota.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel4.setText("Potencijalni dobitak:");

        jTextFieldPotencijalniDobitak.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jTextFieldPotencijalniDobitak.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldPotencijalniDobitak.setEnabled(false);

        jButtonStorniraj.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jButtonStorniraj.setText("Storniraj");
        jButtonStorniraj.setEnabled(false);
        jButtonStorniraj.setNextFocusableComponent(jButtonIsplati);
        jButtonStorniraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStornirajActionPerformed(evt);
            }
        });

        jButtonIsplati.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jButtonIsplati.setText("Isplati");
        jButtonIsplati.setEnabled(false);
        jButtonIsplati.setNextFocusableComponent(jTextFieldIDTiketa);
        jButtonIsplati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIsplatiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldStatusTiketa, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(301, 301, 301)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(jTextFieldIDTiketa, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(jButtonPretraziTiket, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(383, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(jButtonStorniraj, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel3)
                        .addGap(74, 74, 74)
                        .addComponent(jTextFieldUkupnaKvota, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonIsplati, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldPotencijalniDobitak, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(106, 106, 106))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPretraziTiket)
                    .addComponent(jTextFieldIDTiketa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldStatusTiketa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldUkupnaKvota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldPotencijalniDobitak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(144, 144, 144)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStorniraj)
                    .addComponent(jButtonIsplati))
                .addGap(59, 59, 59))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPretraziTiketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPretraziTiketActionPerformed
        pretraziTiket();

    }//GEN-LAST:event_jButtonPretraziTiketActionPerformed
    private void pretraziTiket() {

        pripremiTabelu();
        ModelTabelePretraziTiket model = (ModelTabelePretraziTiket) jTable1.getModel();
        tiket = new Tiket(new ArrayList<>());
        jButtonIsplati.setEnabled(false);
        jButtonStorniraj.setEnabled(false);

        try {

            pretraziIPostaviTiket(model);
            JOptionPane.showMessageDialog(this, "Sistem je uspesno pronasao tiket");

        } catch (IOException eio) {
            prikaziFormuPrijava();
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "ID tiketa mora biti broj");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            postaviPosleNeuspesnePretrage();
        }
    }

    private void postaviPosleNeuspesnePretrage() {
        jTextFieldStatusTiketa.setText("");
        jTextFieldPotencijalniDobitak.setText("");
        jTextFieldUkupnaKvota.setText("");
    }

    private void pretraziIPostaviTiket(ModelTabelePretraziTiket model) throws IOException, ClassNotFoundException, Exception {
        int idTiketa = Integer.parseInt(jTextFieldIDTiketa.getText());
        Tiket tik = new Tiket(idTiketa);
        KlijentTransferObjekat zahtev = new KlijentTransferObjekat();
        zahtev.setOperacija(KlijentTransferObjekat.PRETRAZI_TIKET);
        zahtev.setObjekatOperacije(tik);
        KontrolerKI.vratiInstancu().posaljiZahtev(zahtev);
        ServerTransferObjekat odgovor = KontrolerKI.vratiInstancu().procitajOdgovor();
        if (odgovor.getSignal() == -1) {
            throw new Exception("Sistem ne moze da pronadje tiket po zadatoj vrednosti");
        }

        if ((tiket = (Tiket) odgovor.getObjekatIzvrsenjaOperacije()) == null) {

            JOptionPane.showMessageDialog(this, "Sistem ne moze da pronadje tiket po zadatoj vrednosti");
            return;
        } else {
            tiket = (Tiket) odgovor.getObjekatIzvrsenjaOperacije();

            if (tiket.isObradjen() == false && tiket.isStorniran() == false) {
                jButtonStorniraj.setEnabled(true);
            }
        }

        try {

            for (int i = 0; i < tiket.getStavkeTiketa().size(); i++) {
                model.ubaciStavkuTiketa(tiket.getStavkeTiketa().get(i));
            }

            popuniPanel();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Sistem ne moze da pronadje tiket po zadatoj vrednosti");

        }
    }


    private void jButtonStornirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStornirajActionPerformed
        // TODO add your handling code here:
        stornirajTiket();
    }//GEN-LAST:event_jButtonStornirajActionPerformed
    private void stornirajTiket() {

        try {

            KlijentTransferObjekat zahtev2 = new KlijentTransferObjekat();
            zahtev2.setOperacija(KlijentTransferObjekat.STORNIRAJ_TIKET);
            zahtev2.setObjekatOperacije(tiket);
            KontrolerKI.vratiInstancu().posaljiZahtev(zahtev2);
            ServerTransferObjekat odgovor2 = KontrolerKI.vratiInstancu().procitajOdgovor();
            if (odgovor2.getSignal() == -1) {
                throw new Exception(odgovor2.getPoruka());
            }

            tiket.setStorniran(true);
            popuniPanel();
            JOptionPane.showMessageDialog(this, "Sistem je stornirao tiket");
            jButtonStorniraj.setEnabled(false);
        } catch (IOException eio) {
            prikaziFormuPrijava();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
            jButtonStorniraj.setEnabled(false);
        }
    }
    private void jTextFieldStatusTiketaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldStatusTiketaCaretUpdate
        // TODO add your handling code here:
        String status = jTextFieldStatusTiketa.getText();

        if (status.equals("dobitan")) {
            jButtonIsplati.setEnabled(true);
        }
    }//GEN-LAST:event_jTextFieldStatusTiketaCaretUpdate

    private void jButtonIsplatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIsplatiActionPerformed
        // TODO add your handling code here:
        isplatiTiket();

    }//GEN-LAST:event_jButtonIsplatiActionPerformed
    private void isplatiTiket() {

        try {
            KlijentTransferObjekat zahtev3 = new KlijentTransferObjekat();
            zahtev3.setOperacija(KlijentTransferObjekat.ISPLATI_TIKET);
            zahtev3.setObjekatOperacije(tiket);
            KontrolerKI.vratiInstancu().posaljiZahtev(zahtev3);
            ServerTransferObjekat odgovor3 = KontrolerKI.vratiInstancu().procitajOdgovor();
            if (odgovor3.getSignal() == -1) {
                throw new Exception(odgovor3.getPoruka());
            }

            tiket.setStatus("isplacen");
            popuniPanel();
            JOptionPane.showMessageDialog(this, "Sistem je uspesno isplatio tiket");
            jButtonIsplati.setEnabled(false);
        } catch (IOException eio) {
            prikaziFormuPrijava();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
            jButtonIsplati.setEnabled(false);
        }
    }
    private void jTextFieldStatusTiketaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldStatusTiketaKeyReleased
        // TODO add your handling code here:
        String status = jTextFieldStatusTiketa.getText();

        if (status.equals("dobitan")) {
            jButtonIsplati.setEnabled(true);
        }
    }//GEN-LAST:event_jTextFieldStatusTiketaKeyReleased

    private void jTextFieldIDTiketaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldIDTiketaFocusGained
        // TODO add your handling code here:
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jTextFieldIDTiketa.selectAll();
            }
        });
    }//GEN-LAST:event_jTextFieldIDTiketaFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonIsplati;
    private javax.swing.JButton jButtonPretraziTiket;
    private javax.swing.JButton jButtonStorniraj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldIDTiketa;
    private javax.swing.JTextField jTextFieldPotencijalniDobitak;
    private javax.swing.JTextField jTextFieldStatusTiketa;
    private javax.swing.JTextField jTextFieldUkupnaKvota;
    // End of variables declaration//GEN-END:variables

    private void popuniPanel() throws ClassNotFoundException, SQLException, IOException {
        ModelTabelePretraziTiket model = (ModelTabelePretraziTiket) jTable1.getModel();

        jTextFieldPotencijalniDobitak.setText(Double.toString((Math.round((tiket.getDobitak()) * 100.0) / 100.0)));
        jTextFieldUkupnaKvota.setText(Double.toString((Math.round((tiket.getUkupnaKvota()) * 100.0) / 100.0)));

        String status = tiket.getStatus();
        boolean storniran = tiket.isStorniran();
        if (status.equals("isplacen")) {
            jTextFieldStatusTiketa.setText(status);
        } else if (storniran == true) {
            jTextFieldStatusTiketa.setText("storniran");
        } else {
            jTextFieldStatusTiketa.setText(pronadjiStatusTiketa());
        }

    }

    private void pripremiTabelu() {
        Tiket tiket = new Tiket(new ArrayList<>());
        ModelTabelePretraziTiket model = new ModelTabelePretraziTiket(tiket);
        jTable1.setModel(model);
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
                if (isSelected) {
                    setBackground(Color.LIGHT_GRAY);
                } else {

                    String rezultat = (String) jTable1.getModel().getValueAt(row, 6);
                    String tip = (String) jTable1.getModel().getValueAt(row, 4);
                    if (proveriUtakmicu(rezultat, tip) == 0) {
                        setBackground(Color.RED);

                    } else if (proveriUtakmicu(rezultat, tip) == 1) {
                        setBackground(Color.GREEN);

                    } else {
                        setBackground(Color.WHITE);
                    }

                }

                return this;
            }

        });

    }

    private int proveriUtakmicu(String rezultat, String tip) {
        String[] nizRezultata = rezultat.split(":");
        int goloviDomacin = -1;
        int goloviGost = -1;
        try {
            goloviDomacin = Integer.parseInt(nizRezultata[0]);
            goloviGost = Integer.parseInt(nizRezultata[1]);
        } catch (Exception e) {
            return -1;

        }
        if (goloviDomacin == -1 && goloviGost == -1) {
            return -1;
        }
        if (tip.equals("1")) {
            if (goloviDomacin > goloviGost) {
                return 1;
            }
        }
        if (tip.equals("x")) {
            if (goloviDomacin == goloviGost) {
                return 1;
            }
        }
        if (tip.equals("2")) {
            if (goloviDomacin < goloviGost) {
                return 1;
            }
        }
        if (tip.equals("0-2")) {
            if ((goloviDomacin + goloviGost) <= 2) {
                return 1;
            }
        }
        if (tip.equals("3+")) {
            if ((goloviDomacin + goloviGost) >= 3) {
                return 1;
            }
        }
        return 0;
    }

    private String pronadjiStatusTiketa() {
        boolean dobitan = true;
        boolean aktivan = false;

        for (int i = 0; i < tiket.getStavkeTiketa().size(); i++) {
            String rezultat = (String) jTable1.getModel().getValueAt(i, 6);
            String tip = (String) jTable1.getModel().getValueAt(i, 4);
            if (proveriUtakmicu(rezultat, tip) == 0) {
                dobitan = false;
            }
            if (proveriUtakmicu(rezultat, tip) == -1) {
                aktivan = true;
            }
        }

        if (dobitan == false) {
            return "gubitan";
        } else if (aktivan == true) {
            return "aktivan";
        } else {
            return "dobitan";
        }

    }

    private void setFocusOnjTextFieldIDTiketa() {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                jTextFieldIDTiketa.requestFocus();
            }
        });
    }

    private void prikaziFormuPrijava() {
        JOptionPane.showMessageDialog(this, "Izgubili ste konekciju sa serverom! Probajte ponovo da se ulogujete!");
        FPrijava fp = new FPrijava();
        fp.setLocationRelativeTo(null);
        fp.setResizable(false);
        fp.setVisible(true);
    }
}
